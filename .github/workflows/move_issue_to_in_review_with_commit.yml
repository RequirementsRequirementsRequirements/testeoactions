name: Move issue to "In review" in Projects v2

on:
  push:
    branches:
      - main

jobs:
  update-project-status:
    runs-on: ubuntu-latest

    steps:
      - name: Update Project field to "In review" for referenced issues (with debug)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_ACTIONS_3 }}
        uses: actions/github-script@v7
        with:
          script: |

            console.log("üîê Token prefix:", process.env.GH_TOKEN?.slice(0, 8));

            const issuePattern = /(?:#|gh-)(\d+)/gi;
            const projectId = "PVT_kwDODJdNvM4A4wSl";
            const fieldId = "PVTSSF_lADODJdNvM4A4wMzzgtqqm4";
            const inReviewOptionId = "df73e18b";
            const commits = context.payload.commits;
            const issueNumbers = new Set();

            for (const commit of commits) {
              let match;
              while ((match = issuePattern.exec(commit.message)) !== null) {
                issueNumbers.add(Number(match[1]));
              }
            }

            if (issueNumbers.size === 0) {
              console.log("‚ö†Ô∏è No referenced issues found in commit messages.");
              return;
            }

            const graphqlWithAuth = github.graphql.defaults({
              headers: {
                authorization: `Bearer ${process.env.GH_TOKEN}`,
              },
            });

            for (const issueNumber of issueNumbers) {
              console.log(`üîç Processing issue #${issueNumber}`);

              let issueId;
              try {
                const issueData = await graphqlWithAuth(`
                  query($owner: String!, $repo: String!, $issue: Int!) {
                    repository(owner: $owner, name: $repo) {
                      issue(number: $issue) {
                        id
                      }
                    }
                  }
                `, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue: issueNumber
                });

                issueId = issueData.repository.issue.id;
                console.log("‚úÖ Issue node ID:", issueId);
              } catch (error) {
                console.log("‚ùå Error fetching issue ID:", JSON.stringify(error, null, 2));
                throw error;
              }

              let itemsData, itemId;
              try {
                itemsData = await graphqlWithAuth(`
                  query($projectId: ID!) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100) {
                          nodes {
                            id
                            content {
                              ... on Issue {
                                id
                                number
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `, {
                  projectId
                });

                console.log("üîé Raw project items data:");
                console.log(JSON.stringify(itemsData, null, 2));

                console.log("üßæ Project item list:", JSON.stringify(itemsData, null, 2));

                const items = itemsData.node?.items?.nodes || [];
                const matchingItem = items.find(item => item.content?.number === issueNumber);

                if (!matchingItem) {
                  console.log(`‚ö†Ô∏è Issue #${issueNumber} is not in the project.`);
                  continue;
                }

                itemId = matchingItem.id;
                console.log(`‚úÖ Found project item ID: ${itemId}`);
              } catch (error) {
                console.log("‚ùå Error fetching project item:", JSON.stringify(error, null, 2));
                throw error;
              }

              try {
                const updateResult = await graphqlWithAuth(`
                  mutation {
                    updateProjectV2ItemFieldValue(
                      input: {
                        projectId: "${projectId}",
                        itemId: "${itemId}",
                        fieldId: "${fieldId}",
                        value: {
                          singleSelectOptionId: "${inReviewOptionId}"
                        }
                      }
                    ) {
                      projectV2Item {
                        id
                      }
                    }
                  }
                `);

                console.log(`üéØ Successfully updated issue #${issueNumber} to "In review"`);
                console.log("üì¨ Mutation result:", JSON.stringify(updateResult, null, 2));
              } catch (error) {
                console.log("‚ùå Error updating field:", JSON.stringify(error, null, 2));
                throw error;
              }
            }

            // Optional: Dump full project structure for inspection
            try {
              const projectDump = await graphqlWithAuth(`
                query {
                  organization(login: "testeo-organization") {
                    projectsV2(first: 5) {
                      nodes {
                        id
                        title
                        fields(first: 20) {
                          nodes {
                            __typename
                            ... on ProjectV2SingleSelectField {
                              id
                              name
                              options {
                                id
                                name
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `);
              console.log("üì¶ Full project structure:", JSON.stringify(projectDump, null, 2));
            } catch (error) {
              console.log("‚ö†Ô∏è Failed to dump full project structure:", error.message);
            }
